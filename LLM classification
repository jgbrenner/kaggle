{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":86518,"databundleVersionId":9809560,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-05T17:18:29.994439Z","iopub.execute_input":"2024-12-05T17:18:29.994858Z","iopub.status.idle":"2024-12-05T17:18:31.078965Z","shell.execute_reply.started":"2024-12-05T17:18:29.994823Z","shell.execute_reply":"2024-12-05T17:18:31.077857Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/llm-classification-finetuning/sample_submission.csv\n/kaggle/input/llm-classification-finetuning/train.csv\n/kaggle/input/llm-classification-finetuning/test.csv\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom imblearn.over_sampling import SMOTE\nfrom xgboost import XGBClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T20:59:03.431878Z","iopub.execute_input":"2024-12-05T20:59:03.432295Z","iopub.status.idle":"2024-12-05T20:59:05.597537Z","shell.execute_reply.started":"2024-12-05T20:59:03.432257Z","shell.execute_reply":"2024-12-05T20:59:05.596637Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Load and preview data\ntrain_file = '/kaggle/input/llm-classification-finetuning/train.csv'\ntest_file = '/kaggle/input/llm-classification-finetuning/test.csv'\n\ntrain_data = pd.read_csv(train_file)\ntest_data = pd.read_csv(test_file)\n\nprint(f\"Train Data Shape: {train_data.shape}\")\nprint(f\"Test Data Shape: {test_data.shape}\")\nprint(\"\\nTrain Data Sample:\")\nprint(train_data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T20:59:07.703329Z","iopub.execute_input":"2024-12-05T20:59:07.703877Z","iopub.status.idle":"2024-12-05T20:59:11.543748Z","shell.execute_reply.started":"2024-12-05T20:59:07.703839Z","shell.execute_reply":"2024-12-05T20:59:11.542609Z"}},"outputs":[{"name":"stdout","text":"Train Data Shape: (57477, 9)\nTest Data Shape: (3, 4)\n\nTrain Data Sample:\n       id             model_a              model_b  \\\n0   30192  gpt-4-1106-preview           gpt-4-0613   \n1   53567           koala-13b           gpt-4-0613   \n2   65089  gpt-3.5-turbo-0613       mistral-medium   \n3   96401    llama-2-13b-chat  mistral-7b-instruct   \n4  198779           koala-13b   gpt-3.5-turbo-0314   \n\n                                              prompt  \\\n0  [\"Is it morally right to try to have a certain...   \n1  [\"What is the difference between marriage lice...   \n2  [\"explain function calling. how would you call...   \n3  [\"How can I create a test set for a very rare ...   \n4  [\"What is the best way to travel from Tel-Aviv...   \n\n                                          response_a  \\\n0  [\"The question of whether it is morally right ...   \n1  [\"A marriage license is a legal document that ...   \n2  [\"Function calling is the process of invoking ...   \n3  [\"Creating a test set for a very rare category...   \n4  [\"The best way to travel from Tel Aviv to Jeru...   \n\n                                          response_b  winner_model_a  \\\n0  [\"As an AI, I don't have personal beliefs or o...               1   \n1  [\"A marriage license and a marriage certificat...               0   \n2  [\"Function calling is the process of invoking ...               0   \n3  [\"When building a classifier for a very rare c...               1   \n4  [\"The best way to travel from Tel-Aviv to Jeru...               0   \n\n   winner_model_b  winner_tie  \n0               0           0  \n1               1           0  \n2               0           1  \n3               0           0  \n4               1           0  \n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Check for missing values\nprint(\"\\nMissing Values in Train Data:\")\nprint(train_data.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T20:59:15.754870Z","iopub.execute_input":"2024-12-05T20:59:15.755904Z","iopub.status.idle":"2024-12-05T20:59:15.799011Z","shell.execute_reply.started":"2024-12-05T20:59:15.755799Z","shell.execute_reply":"2024-12-05T20:59:15.797435Z"}},"outputs":[{"name":"stdout","text":"\nMissing Values in Train Data:\nid                0\nmodel_a           0\nmodel_b           0\nprompt            0\nresponse_a        0\nresponse_b        0\nwinner_model_a    0\nwinner_model_b    0\nwinner_tie        0\ndtype: int64\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"# Feature Engineering","metadata":{}},{"cell_type":"code","source":"# 1. Response lengths\ntrain_data['response_a_length'] = train_data['response_a'].apply(len)\ntrain_data['response_b_length'] = train_data['response_b'].apply(len)\n\n# 2. Sentiment analysis\nfrom textblob import TextBlob\ndef get_sentiment(text):\n    return TextBlob(text).sentiment.polarity\n\ntrain_data['response_a_sentiment'] = train_data['response_a'].apply(get_sentiment)\ntrain_data['response_b_sentiment'] = train_data['response_b'].apply(get_sentiment)\ntrain_data['sentiment_diff'] = train_data['response_a_sentiment'] - train_data['response_b_sentiment']\n\n# 3. Similarity using TF-IDF\ntfidf_vectorizer = TfidfVectorizer()\nresponses = train_data['prompt'].tolist() + train_data['response_a'].tolist() + train_data['response_b'].tolist()\ntfidf_matrix = tfidf_vectorizer.fit_transform(responses)\n\ntrain_data['similarity_a'] = [\n    cosine_similarity(tfidf_matrix[i:i+1], tfidf_matrix[len(train_data) + i:len(train_data) + i + 1])[0][0]\n    for i in range(len(train_data))\n]\ntrain_data['similarity_b'] = [\n    cosine_similarity(tfidf_matrix[i:i+1], tfidf_matrix[2 * len(train_data) + i:2 * len(train_data) + i + 1])[0][0]\n    for i in range(len(train_data))\n]\ntrain_data['similarity_diff'] = train_data['similarity_a'] - train_data['similarity_b']\n\n# 4. Lexical diversity\ndef lexical_diversity(text):\n    words = text.split()\n    return len(set(words)) / len(words) if len(words) > 0 else 0\n\ntrain_data['lexical_diversity_a'] = train_data['response_a'].apply(lexical_diversity)\ntrain_data['lexical_diversity_b'] = train_data['response_b'].apply(lexical_diversity)\ntrain_data['lexical_diversity_diff'] = train_data['lexical_diversity_a'] - train_data['lexical_diversity_b']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T20:59:20.352280Z","iopub.execute_input":"2024-12-05T20:59:20.352700Z","iopub.status.idle":"2024-12-05T21:04:48.570179Z","shell.execute_reply.started":"2024-12-05T20:59:20.352665Z","shell.execute_reply":"2024-12-05T21:04:48.568939Z"}},"outputs":[{"name":"stderr","text":"Exception ignored in: <bound method IPythonKernel._clean_thread_parent_frames of <ipykernel.ipkernel.IPythonKernel object at 0x7bbb217973a0>>\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/ipykernel/ipkernel.py\", line 775, in _clean_thread_parent_frames\n    def _clean_thread_parent_frames(\nKeyboardInterrupt: \n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"# Model Training Preparation","metadata":{}},{"cell_type":"code","source":"features = ['response_a_length', 'response_b_length', 'sentiment_diff', \n            'similarity_diff', 'lexical_diversity_diff']\ntarget = 'winner_model_a'\n\nX = train_data[features]\ny = train_data[target]\n\n# Train-test split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Handle class imbalance with SMOTE\nsmote = SMOTE(random_state=42)\nX_resampled, y_resampled = smote.fit_resample(X_train, y_train)\n\n# Random Forest Model\nrf_model = RandomForestClassifier(random_state=42, class_weight='balanced')\nrf_model.fit(X_resampled, y_resampled)\nrf_pred = rf_model.predict(X_val)\n\nprint(\"\\nRandom Forest Model:\")\nprint(f\"Accuracy: {accuracy_score(y_val, rf_pred)}\")\nprint(classification_report(y_val, rf_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T21:05:00.996539Z","iopub.execute_input":"2024-12-05T21:05:00.996998Z","iopub.status.idle":"2024-12-05T21:05:21.581436Z","shell.execute_reply.started":"2024-12-05T21:05:00.996960Z","shell.execute_reply":"2024-12-05T21:05:21.580324Z"}},"outputs":[{"name":"stdout","text":"\nRandom Forest Model:\nAccuracy: 0.6055149617258176\n              precision    recall  f1-score   support\n\n           0       0.70      0.69      0.69      7466\n           1       0.44      0.46      0.45      4030\n\n    accuracy                           0.61     11496\n   macro avg       0.57      0.57      0.57     11496\nweighted avg       0.61      0.61      0.61     11496\n\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# XGBoost Model\nxgb_model = XGBClassifier(scale_pos_weight=len(y_train) / sum(y_train), \n                           use_label_encoder=False, eval_metric='logloss', random_state=42)\nxgb_model.fit(X_train, y_train)\nxgb_pred = xgb_model.predict(X_val)\n\nprint(\"\\nXGBoost Model:\")\nprint(f\"Accuracy: {accuracy_score(y_val, xgb_pred)}\")\nprint(classification_report(y_val, xgb_pred))\n\n# Feature Importance\nplt.figure(figsize=(10, 6))\nplt.barh(features, xgb_model.feature_importances_)\nplt.title('Feature Importance (XGBoost)')\nplt.xlabel('Importance Score')\nplt.ylabel('Feature')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T21:05:31.422319Z","iopub.execute_input":"2024-12-05T21:05:31.422732Z","iopub.status.idle":"2024-12-05T21:05:32.182738Z","shell.execute_reply.started":"2024-12-05T21:05:31.422696Z","shell.execute_reply":"2024-12-05T21:05:32.181602Z"}},"outputs":[{"name":"stdout","text":"\nXGBoost Model:\nAccuracy: 0.5214857341684064\n              precision    recall  f1-score   support\n\n           0       0.74      0.40      0.52      7466\n           1       0.40      0.75      0.52      4030\n\n    accuracy                           0.52     11496\n   macro avg       0.57      0.57      0.52     11496\nweighted avg       0.62      0.52      0.52     11496\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"from sklearn.ensemble import VotingClassifier\n\nensemble_model = VotingClassifier(\n    estimators=[('rf', rf_model), ('xgb', xgb_model)], voting='soft'\n)\nensemble_model.fit(X_train, y_train)\nensemble_pred = ensemble_model.predict(X_val)\n\nprint(\"Ensemble Model Accuracy:\", accuracy_score(y_val, ensemble_pred))\nprint(\"Ensemble Model Classification Report:\")\nprint(classification_report(y_val, ensemble_pred))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T21:05:36.933283Z","iopub.execute_input":"2024-12-05T21:05:36.933703Z","iopub.status.idle":"2024-12-05T21:05:52.729720Z","shell.execute_reply.started":"2024-12-05T21:05:36.933666Z","shell.execute_reply":"2024-12-05T21:05:52.728494Z"}},"outputs":[{"name":"stdout","text":"Ensemble Model Accuracy: 0.6221294363256785\nEnsemble Model Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.71      0.70      0.71      7466\n           1       0.46      0.47      0.47      4030\n\n    accuracy                           0.62     11496\n   macro avg       0.59      0.59      0.59     11496\nweighted avg       0.62      0.62      0.62     11496\n\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"from sklearn.ensemble import VotingClassifier\n\n# Define weights for Random Forest and XGBoost\nweights = [1, 2]  # Example: Give more weight to Random Forest\n\n# Create the weighted ensemble model\nweighted_ensemble_model = VotingClassifier(\n    estimators=[('rf', rf_model), ('xgb', xgb_model)],\n    voting='soft',\n    weights=weights\n)\n\n# Train the weighted ensemble\nweighted_ensemble_model.fit(X_train, y_train)\n\n# Predict and evaluate\nweighted_ensemble_pred = weighted_ensemble_model.predict(X_val)\n\n# Evaluate the model\nprint(\"Weighted Ensemble Model Accuracy:\", accuracy_score(y_val, weighted_ensemble_pred))\nprint(\"\\nWeighted Ensemble Model Classification Report:\")\nprint(classification_report(y_val, weighted_ensemble_pred))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T21:09:07.451995Z","iopub.execute_input":"2024-12-05T21:09:07.452405Z","iopub.status.idle":"2024-12-05T21:09:23.550123Z","shell.execute_reply.started":"2024-12-05T21:09:07.452370Z","shell.execute_reply":"2024-12-05T21:09:23.548948Z"}},"outputs":[{"name":"stdout","text":"Weighted Ensemble Model Accuracy: 0.5923799582463466\n\nWeighted Ensemble Model Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.72      0.60      0.66      7466\n           1       0.44      0.58      0.50      4030\n\n    accuracy                           0.59     11496\n   macro avg       0.58      0.59      0.58     11496\nweighted avg       0.62      0.59      0.60     11496\n\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"\nfrom sklearn.metrics import accuracy_score, classification_report, f1_score\n\n# Define weight combinations to test\nweight_combinations = [(1, 1), (2, 1), (1, 2), (3, 1), (1, 3), (1.5, 1), (1, 1.5)]\n\n# Store results\nresults = []\n\nfor weights in weight_combinations:\n    # Create and train the ensemble model with specific weights\n    ensemble_model = VotingClassifier(\n        estimators=[('rf', rf_model), ('xgb', xgb_model)],\n        voting='soft',\n        weights=weights\n    )\n    ensemble_model.fit(X_train, y_train)\n    \n    # Predict on the validation set\n    ensemble_pred = ensemble_model.predict(X_val)\n    \n    # Calculate metrics\n    acc = accuracy_score(y_val, ensemble_pred)\n    macro_f1 = f1_score(y_val, ensemble_pred, average='macro')\n    weighted_f1 = f1_score(y_val, ensemble_pred, average='weighted')\n    \n    # Store the results\n    results.append({\n        'weights': weights,\n        'accuracy': acc,\n        'macro_f1': macro_f1,\n        'weighted_f1': weighted_f1\n    })\n    \n    # Print intermediate results\n    print(f\"Weights {weights} -> Accuracy: {acc}, Macro F1: {macro_f1}, Weighted F1: {weighted_f1}\")\n\n# Convert results to a DataFrame for easy visualization\nresults_df = pd.DataFrame(results)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T21:12:57.889897Z","iopub.execute_input":"2024-12-05T21:12:57.890328Z","iopub.status.idle":"2024-12-05T21:14:48.176113Z","shell.execute_reply.started":"2024-12-05T21:12:57.890290Z","shell.execute_reply":"2024-12-05T21:14:48.174717Z"}},"outputs":[{"name":"stdout","text":"Weights (1, 1) -> Accuracy: 0.6221294363256785, Macro F1: 0.5866507251044641, Weighted F1: 0.6228457523479595\nWeights (2, 1) -> Accuracy: 0.6423103688239388, Macro F1: 0.5822164050445036, Weighted F1: 0.6295748590688474\nWeights (1, 2) -> Accuracy: 0.5923799582463466, Macro F1: 0.5775488224043137, Weighted F1: 0.6012070316676492\nWeights (3, 1) -> Accuracy: 0.6483994432846207, Macro F1: 0.5754253665323932, Weighted F1: 0.6280352968136886\nWeights (1, 3) -> Accuracy: 0.5732428670842032, Macro F1: 0.5655064378945441, Weighted F1: 0.5828352323506514\nWeights (1.5, 1) -> Accuracy: 0.6369171885873347, Macro F1: 0.5869618069142692, Weighted F1: 0.629894946341146\nWeights (1, 1.5) -> Accuracy: 0.6057759220598469, Macro F1: 0.5831197023265722, Weighted F1: 0.6121670049398303\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"optimal_ensemble_model = VotingClassifier(\n    estimators=[('rf', rf_model), ('xgb', xgb_model)],\n    voting='soft',\n    weights=[1.5, 1]\n)\noptimal_ensemble_model.fit(X_train, y_train)\n\n# Predict and evaluate\noptimal_ensemble_pred = optimal_ensemble_model.predict(X_val)\nprint(\"Optimal Ensemble Model Accuracy:\", accuracy_score(y_val, optimal_ensemble_pred))\nprint(\"\\nOptimal Ensemble Model Classification Report:\")\nprint(classification_report(y_val, optimal_ensemble_pred))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T21:22:14.230169Z","iopub.execute_input":"2024-12-05T21:22:14.230610Z","iopub.status.idle":"2024-12-05T21:22:31.246521Z","shell.execute_reply.started":"2024-12-05T21:22:14.230577Z","shell.execute_reply":"2024-12-05T21:22:31.245200Z"}},"outputs":[{"name":"stdout","text":"Optimal Ensemble Model Accuracy: 0.6369171885873347\n\nOptimal Ensemble Model Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.71      0.76      0.73      7466\n           1       0.48      0.41      0.44      4030\n\n    accuracy                           0.64     11496\n   macro avg       0.59      0.59      0.59     11496\nweighted avg       0.63      0.64      0.63     11496\n\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# 1. Response lengths\ntest_data['response_a_length'] = test_data['response_a'].apply(len)\ntest_data['response_b_length'] = test_data['response_b'].apply(len)\n\n# 2. Sentiment analysis\ntest_data['response_a_sentiment'] = test_data['response_a'].apply(get_sentiment)\ntest_data['response_b_sentiment'] = test_data['response_b'].apply(get_sentiment)\ntest_data['sentiment_diff'] = test_data['response_a_sentiment'] - test_data['response_b_sentiment']\n\n# 3. Similarity using TF-IDF\ntest_responses = test_data['prompt'].tolist() + test_data['response_a'].tolist() + test_data['response_b'].tolist()\ntest_tfidf_matrix = tfidf_vectorizer.transform(test_responses)\n\ntest_data['similarity_a'] = [\n    cosine_similarity(test_tfidf_matrix[i:i+1], test_tfidf_matrix[len(test_data) + i:len(test_data) + i + 1])[0][0]\n    for i in range(len(test_data))\n]\ntest_data['similarity_b'] = [\n    cosine_similarity(test_tfidf_matrix[i:i+1], test_tfidf_matrix[2 * len(test_data) + i:2 * len(test_data) + i + 1])[0][0]\n    for i in range(len(test_data))\n]\ntest_data['similarity_diff'] = test_data['similarity_a'] - test_data['similarity_b']\n\n# 4. Lexical diversity\ntest_data['lexical_diversity_a'] = test_data['response_a'].apply(lexical_diversity)\ntest_data['lexical_diversity_b'] = test_data['response_b'].apply(lexical_diversity)\ntest_data['lexical_diversity_diff'] = test_data['lexical_diversity_a'] - test_data['lexical_diversity_b']\n\n# Select only the features for prediction\nX_test = test_data[features]\n\n# Predict with the optimal ensemble model\ntest_predictions = optimal_ensemble_model.predict(X_test)\n\n# Save predictions for submission\nsubmission = pd.DataFrame({\n    'id': test_data['id'],\n    'prediction': test_predictions\n})\nsubmission.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T21:33:41.517327Z","iopub.execute_input":"2024-12-05T21:33:41.517731Z","iopub.status.idle":"2024-12-05T21:33:41.568631Z","shell.execute_reply.started":"2024-12-05T21:33:41.517695Z","shell.execute_reply":"2024-12-05T21:33:41.567687Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"X_test = test_data[features]\ntest_predictions = optimal_ensemble_model.predict(X_test)\n\n# Save predictions for submission\nsubmission = pd.DataFrame({\n    'id': test_data['id'],\n    'prediction': test_predictions\n})\nsubmission.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T21:33:49.317565Z","iopub.execute_input":"2024-12-05T21:33:49.317960Z","iopub.status.idle":"2024-12-05T21:33:49.345332Z","shell.execute_reply.started":"2024-12-05T21:33:49.317926Z","shell.execute_reply":"2024-12-05T21:33:49.344097Z"}},"outputs":[],"execution_count":21}]}